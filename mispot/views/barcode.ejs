<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Verify Barcode | MiSpot</title>
    <link rel="icon" href="mispot.ico" type="image/x-icon" />
    <style type="text/css">
      body {
        background: #ddd;
        color: black;
      }
    </style>
    <script src="https://unpkg.com/html5-qrcode@2.0.9/dist/html5-qrcode.min.js"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <script>
      var DEF_WASM_PATH = "http://localhost:8080/wasm";
  </script>
      
  <script defer type="text/javascript" src="\datasymbol-sdk-hlp.min.js"></script>
  </head>
  <body>
    <nav
      class="navbar navbar-expand-lg navbar-dark bg-dark"
      style="position: relative"
    >
      <div class="container-fluid">
        <a
          class="navbar-brand"
          href="http://localhost:8080/home"
          style="font-family: 'Courier New', monospace; font-weight: bold"
          >MiSpot</a
        >
      </div>
    </nav>
    <p id='status'>Downloading ...</p>
    <div id="datasymbol-barcode-viewport" style="display:block;width:640px; height:480px;"></div>
    <canvas id="canvas" width="640" height="480"></canvas>
    <!-- <div
      id="qr-reader"
      class="position-absolute top-50 start-50 translate-middle"
      style="height: 40%"
    ></div>

    <div id="submit"></div> -->

<script>
var bFirst = true;

function onBarcodeReady (barcodeResult) {
  var barDataEl = document.getElementById('status');

for (var i = 0; i < barcodeResult.length; ++i) {
        var sBarcode = DSScanner.bin2String(barcodeResult[i]);
        var sPoints = "";
        for (var j = 0; j < 4; j++)
            sPoints += "(" + barcodeResult[i].points[j].x + ", " + barcodeResult[i].points[j].y + "),";

        barDataEl.innerHTML = barcodeResult[i].type + ": " + sBarcode + "|" + sPoints;
        console.log(barDataEl.innerHTML);
  }
};

function onError(err) {
  var statusElement = document.getElementById('status');
  statusElement.innerHTML = 'Error: ' + err.message;

  /*
  if(err.name == 'NotFoundError')
      alert('no camera');
  else if(err.name == 'PermissionDeniedError')
      alert('camera permission denied');
  else if(err.name == 'NotCompatibleBrowser')
      alert('browser err');
  else if(err.name == 'ModuleAbort')
      alert('module err');
  else if(err.name == 'CannotInitLib')
      alert('Cannot initialize barcode decoder SDK');
  */
}

function CreateScanner(device){
  var scannerSettings = {
      scanner: {
    //barcodeAtPoint:true,
          key: '',
          frameTimeout:	100,
          barcodeTimeout:	1000,
          beep: false,
      },
      viewport: {
          id: 'datasymbol-barcode-viewport',
          width: 500,	//if not defined then 100%
          //height: 200,
      },
      camera: {
          id: device ? device.id : null,
          label: device ? device.label : null,
          resx: 640,
          // resy: 480,
          //facingMode: 'user', //'environment'
      },
      barcode: {
          barcodeTypes: ['EAN13', 'Code128', 'DataMatrix'],
          bQRCodeFindMicro: false,
      },
  };

  DSScanner.addEventListener('onError', onError);
  DSScanner.addEventListener('onBarcode', onBarcodeReady);
  DSScanner.addEventListener('onScannerStarted', function() {
    console.log('HTML onScannerStarted');
  });

  DSScanner.addEventListener('onScannerReady', function (frameSize) {
      console.log('HTML onScannerReady|'+frameSize.width + '|'+frameSize.height);
  
  if( !bFirst ) {
    DSScanner.StartScanner();
    return;
  }
  
  bFirst = false;

      var statusElement = document.getElementById('status');
      statusElement.innerHTML = ' ';	//statusElement.hidden = true;
      DSScanner.StartScanner();

  //set scanning rect
  var scannerSettings = {
    scanner: {
      scanningRect: {left:frameSize.width/4, top:frameSize.height/4, width:frameSize.width/2, height:frameSize.height/2},
    },
  };
  DSScanner.setScannerSettings(scannerSettings);
});

  DSScanner.Create(scannerSettings);
}

function ChangeScannerSettings() {
  var scannerSettings = {
      scanner: {
    //scanningRect: {left:0, top:0, width:320, height:240},
      },
      viewport: {
          width: 300,
      },
      barcode: {
          barcodeTypes: ['EAN13', 'DataMatrix'],
      },
  };

  DSScanner.setScannerSettings(scannerSettings);
}

window.onload = function () {
  /*    DSScanner.getVideoDevices(function (devices) {
          devices.forEach(function (device) {
              alert("device:" + device.label + '|' + device.id);
          });
      });
*/
CreateScanner();
}
  
function ClearScanningRect() {
  var scannerSettings = {
    scanner: {
      scanningRect: {left:0, top:0, width:0, height:0},
    },
  };
  DSScanner.setScannerSettings(scannerSettings);
}

function SetScanningRect() {
  var scannerSettings = {
    scanner: {
      scanningRect: {left:0, top:0, width:320, height:240},
    },
  };
  DSScanner.setScannerSettings(scannerSettings);
}

</script>

    <!-- <script type="text/javascript">
      let t1 = 0;
      let t2 = 0;
      function onScanSuccess(decodedText, decodedResult) {
        var minutes = 1000 * 60;
        var hours = minutes * 60;
        var days = hours * 24;
        var d = new Date();
        var t = d.getTime();

        var y = Math.round(t % days);
        y = Math.round(y / 1000);
        t2 = y;
        time = t2 - t1;
        console.log(time, t2, t1);
        document.querySelector("#qr-reader__scan_region > video").id = "webcam";
        let canvas = document.querySelector("#canvas");
        const video = document.getElementById("webcam");
        if (decodedResult === txt) {
          var image_data_url = "";
          canvas
            .getContext("2d")
            .drawImage(video, 0, 0, canvas.width, canvas.height);
          image_data_url = canvas.toDataURL("image/jpeg");

          let img = image_data_url;
          var httpPost = new XMLHttpRequest(),
            path = "http://localhost:8080/statu/" + ttid,
            data = JSON.stringify({ img, time });
          httpPost.onreadystatechange = function (err) {
            if (httpPost.readyState == 4 && httpPost.status == 200) {
              console.log(httpPost.responseText);
              location.replace(httpPost.responseText);
            } else {
              console.log(err);
            }
          };
          // Set the content type of the request to json since that's what's being sent
          httpPost.open("POST", path, true);
          httpPost.send(data);

          // document.getElementById("submit").innerHTML =
          //   '<form id="formid"; style="visibility: `hiddden`" action="http://localhost:8080/statu/' +
          //   ttid +
          //   '" method="post"><div><input type="text" name="img" value="' +
          //   image_data_url +
          //   '"></div></form>';

          // document.getElementById("formid").submit(function (e) {
          //   e.preventDefault();
          // });
        }
        console.log(`Code scanned = ${decodedText}`, decodedResult);
        // if()
      }
      var html5QrcodeScanner = new Html5QrcodeScanner("qr-reader", {
        fps: 10,
        qrbox: 150,
      });
      html5QrcodeScanner.render(onScanSuccess);

      let ttid = window.location.href;
      console.log(ttid);
      ttid = ttid.slice(37);
      console.log(ttid);

      var txt = undefined;
      var prev = undefined;
      const req = new XMLHttpRequest();
      req.onload = async function () {
        try {
          txt = this.responseText;
          txt = JSON.parse(txt);
          prev = txt.pre;
          txt = txt.ado;
          console.log(txt);
          var minutes = 1000 * 60;
          var hours = minutes * 60;
          var days = hours * 24;
          var d = new Date();
          var t = d.getTime();

          var y = Math.round(t % days);
          y = Math.round(y / 1000);
          t1 = y;
        } catch (err) {
          console.log(err);
          alert("Unable to fetch data!");
        }
      };

      req.open("GET", "http://localhost:8080/barcodedata/" + ttid, true);
      console.log(ttid);
      req.send();
      req.onerror = function () {};
    </script> -->
  </body>
</html>
